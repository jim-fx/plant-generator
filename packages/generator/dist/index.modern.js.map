{"version":3,"file":"index.modern.js","sources":["../src/executeSkeletonNode.ts","../src/executeGeometryNode.ts","../src/createContext.ts","../src/plant.ts"],"sourcesContent":["import Nodes from '@plantarium/nodes';\nimport { GeneratorContext } from '@plantarium/types';\nimport { PlantNode } from '@types';\n\nconst nodes: { [type: string]: PlantNode } = {};\n\nNodes.forEach((n) => {\n  nodes[n.type] = n;\n});\n\nexport default (node, ctx: GeneratorContext) => {\n  if (node.type in nodes) {\n    return nodes[node.type].computeSkeleton(node, ctx);\n  }\n\n  return node.result;\n};\n","import Nodes from '@plantarium/nodes';\nimport { GeneratorContext } from '@plantarium/types';\nimport { PlantNode } from '@types';\n\nconst nodes: { [type: string]: PlantNode } = {};\n\nNodes.forEach((n) => {\n  nodes[n.type] = n;\n});\n\nexport default (node, ctx: GeneratorContext) => {\n  if (node.type in nodes) {\n    return nodes[node.type].computeGeometry(node, ctx);\n  }\n\n  return node.result;\n};\n","import {\n  GeneratorContext,\n  ParameterResult,\n  PlantariumSettings,\n} from '@plantarium/types';\n\nlet lastSettings = '';\nlet lastCtx;\n\nconst createContext = (s: PlantariumSettings): GeneratorContext => {\n  return {\n    handleParameter(param: ParameterResult, alpha?: number) {\n      return alpha;\n    },\n    getSetting(key: string, defaultValue) {\n      console.log('CTX GET', key, s[key]);\n      return s[key] ?? defaultValue;\n    },\n    get seed() {\n      return Math.random();\n    },\n    refresh() {\n      return Math.random();\n    },\n  };\n};\n\nexport default (settings: PlantariumSettings) => {\n  const s = JSON.stringify(settings);\n\n  if (s !== lastSettings) {\n    lastSettings = s;\n    lastCtx = createContext(settings);\n  }\n\n  return lastCtx;\n};\n","import { logger } from '@plantarium/helpers';\nimport { calculateNormals } from '@plantarium/geometry';\nimport {\n  GeneratorContext,\n  NodeResult,\n  PlantariumSettings,\n} from '@plantarium/types';\n\nimport executeSkeletonNode from './executeSkeletonNode';\nimport executeGeometryNode from './executeGeometryNode';\nimport createContext from 'createContext';\n\nconst log = logger('gen.plant');\n\nconst isNode = (value): value is NodeResult => {\n  return typeof value === 'object' && 'type' in value;\n};\n\nconst handleSkeletonNode = (node, ctx: GeneratorContext) => {\n  log('skeleton.' + node.type, node);\n\n  const parameters = {};\n  Object.entries(node.parameters).forEach(([key, value]) => {\n    parameters[key] = isNode(value) ? handleSkeletonNode(value, ctx) : value;\n  });\n  node.parameters = parameters;\n\n  node.result = executeSkeletonNode(node, ctx);\n\n  log('skeleton.' + node.type, node.result);\n\n  return node;\n};\n\nconst handleGeometryNode = (node, ctx) => {\n  log('geometry.' + node.type, node);\n\n  const parameters = {};\n  Object.entries(node.parameters).forEach(([key, value]) => {\n    parameters[key] = isNode(value) ? handleGeometryNode(value, ctx) : value;\n  });\n\n  node.parameters = parameters;\n\n  node.result = { ...node.result, ...executeGeometryNode(node, ctx) };\n\n  log('geometry.' + node.type, node.result);\n\n  return node;\n};\n\nexport default function plant(rootNode: NodeResult, s: PlantariumSettings) {\n  const ctx = createContext(s);\n  console.log(rootNode, ctx);\n\n  const skelly = handleSkeletonNode(rootNode, ctx);\n\n  log('final skeleton', skelly);\n\n  const final = handleGeometryNode(skelly, ctx);\n\n  log('geo', final);\n\n  const { result } = final;\n\n  result.geometry = calculateNormals(result.geometry);\n\n  return result;\n}\n"],"names":["nodes","Nodes","forEach","n","type","node","ctx","computeGeometry","result","lastCtx","lastSettings","log","logger","isNode","value","handleSkeletonNode","parameters","Object","entries","key","computeSkeleton","executeSkeletonNode","handleGeometryNode","executeGeometryNode","plant","rootNode","s","settings","JSON","stringify","handleParameter","param","alpha","getSetting","defaultValue","console","seed","Math","random","refresh","createContext","skelly","final","geometry","calculateNormals"],"mappings":"+KAIA,MAAMA,EAAuC,GAE7CC,EAAMC,QAASC,IACbH,EAAMG,EAAEC,MAAQD,ICHlB,MAAMH,EAAuC,GAE7CC,EAAMC,QAASC,IACbH,EAAMG,EAAEC,MAAQD,IAGlB,OAAgBE,EAAMC,IAChBD,EAAKD,QAAQJ,EACRA,EAAMK,EAAKD,MAAMG,gBAAgBF,EAAMC,GAGzCD,EAAKG,OCTd,IACIC,EADAC,EAAe,GCMnB,MAAMC,EAAMC,EAAO,aAEbC,EAAUC,GACU,iBAAVA,GAAsB,SAAUA,EAG1CC,EAAqB,CAACV,EAAMC,KAChCK,EAAI,YAAcN,EAAKD,KAAMC,GAE7B,MAAMW,EAAa,GAUnB,OATAC,OAAOC,QAAQb,EAAKW,YAAYd,QAAQ,EAAEiB,EAAKL,MAC7CE,EAAWG,GAAON,EAAOC,GAASC,EAAmBD,EAAOR,GAAOQ,IAErET,EAAKW,WAAaA,EAElBX,EAAKG,SHjBSH,EAAMC,IAChBD,EAAKD,QAAQJ,EACRA,EAAMK,EAAKD,MAAMgB,gBAAgBf,EAAMC,GAGzCD,EAAKG,OGYEa,CAAoBhB,EAAMC,GAExCK,EAAI,YAAcN,EAAKD,KAAMC,EAAKG,QAE3BH,GAGHiB,EAAqB,CAACjB,EAAMC,KAChCK,EAAI,YAAcN,EAAKD,KAAMC,GAE7B,MAAMW,EAAa,GAWnB,OAVAC,OAAOC,QAAQb,EAAKW,YAAYd,QAAQ,EAAEiB,EAAKL,MAC7CE,EAAWG,GAAON,EAAOC,GAASQ,EAAmBR,EAAOR,GAAOQ,IAGrET,EAAKW,WAAaA,EAElBX,EAAKG,OAAS,IAAKH,EAAKG,UAAWe,EAAoBlB,EAAMC,IAE7DK,EAAI,YAAcN,EAAKD,KAAMC,EAAKG,QAE3BH,GAGT,SAAwBmB,EAAMC,EAAsBC,GAClD,MAAMpB,GDzBQqB,IACd,MAAMD,EAAIE,KAAKC,UAAUF,GAOzB,OALID,IAAMhB,IACRA,EAAegB,EACfjB,EAvBmBiB,CAAAA,IACd,CACLI,gBAAe,CAACC,EAAwBC,IAC/BA,EAETC,WAAU,CAACd,EAAae,KACtBC,QAAQxB,IAAI,UAAWQ,EAAKO,EAAEP,IACvBO,EAAEP,IAAQe,GAEnBE,WACE,OAAOC,KAAKC,UAEdC,QAAO,IACEF,KAAKC,WAUJE,CAAcb,IAGnBlB,GCiBK+B,CAAcd,GAC1BS,QAAQxB,IAAIc,EAAUnB,GAEtB,MAAMmC,EAAS1B,EAAmBU,EAAUnB,GAE5CK,EAAI,iBAAkB8B,GAEtB,MAAMC,EAAQpB,EAAmBmB,EAAQnC,GAEzCK,EAAI,MAAO+B,GAEX,MAAMlC,OAAEA,GAAWkC,EAInB,OAFAlC,EAAOmC,SAAWC,EAAiBpC,EAAOmC,UAEnCnC"}