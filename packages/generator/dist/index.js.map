{"version":3,"file":"index.js","sources":["../src/executeSkeletonNode.ts","../src/executeGeometryNode.ts","../src/createContext.ts","../src/plant.ts"],"sourcesContent":["import Nodes from '@plantarium/nodes';\nimport { GeneratorContext } from '@plantarium/types';\nimport { PlantNode } from '@types';\n\nconst nodes: { [type: string]: PlantNode } = {};\n\nNodes.forEach((n) => {\n  nodes[n.type] = n;\n});\n\nexport default (node, ctx: GeneratorContext) => {\n  if (node.type in nodes) {\n    return nodes[node.type].computeSkeleton(node, ctx);\n  }\n\n  return node.result;\n};\n","import Nodes from '@plantarium/nodes';\nimport { GeneratorContext } from '@plantarium/types';\nimport { PlantNode } from '@types';\n\nconst nodes: { [type: string]: PlantNode } = {};\n\nNodes.forEach((n) => {\n  nodes[n.type] = n;\n});\n\nexport default (node, ctx: GeneratorContext) => {\n  if (node.type in nodes) {\n    return nodes[node.type].computeGeometry(node, ctx);\n  }\n\n  return node.result;\n};\n","import {\n  GeneratorContext,\n  ParameterResult,\n  PlantariumSettings,\n} from '@plantarium/types';\n\nlet lastSettings = '';\nlet lastCtx;\n\nconst createContext = (s: PlantariumSettings): GeneratorContext => {\n  return {\n    handleParameter(param: ParameterResult, alpha?: number) {\n      return alpha;\n    },\n    getSetting(key: string, defaultValue) {\n      console.log('CTX GET', key, s[key]);\n      return s[key] ?? defaultValue;\n    },\n    get seed() {\n      return Math.random();\n    },\n    refresh() {\n      return Math.random();\n    },\n  };\n};\n\nexport default (settings: PlantariumSettings) => {\n  const s = JSON.stringify(settings);\n\n  if (s !== lastSettings) {\n    lastSettings = s;\n    lastCtx = createContext(settings);\n  }\n\n  return lastCtx;\n};\n","import { logger } from '@plantarium/helpers';\nimport { calculateNormals } from '@plantarium/geometry';\nimport {\n  GeneratorContext,\n  NodeResult,\n  PlantariumSettings,\n} from '@plantarium/types';\n\nimport executeSkeletonNode from './executeSkeletonNode';\nimport executeGeometryNode from './executeGeometryNode';\nimport createContext from 'createContext';\n\nconst log = logger('gen.plant');\n\nconst isNode = (value): value is NodeResult => {\n  return typeof value === 'object' && 'type' in value;\n};\n\nconst handleSkeletonNode = (node, ctx: GeneratorContext) => {\n  log('skeleton.' + node.type, node);\n\n  const parameters = {};\n  Object.entries(node.parameters).forEach(([key, value]) => {\n    parameters[key] = isNode(value) ? handleSkeletonNode(value, ctx) : value;\n  });\n  node.parameters = parameters;\n\n  node.result = executeSkeletonNode(node, ctx);\n\n  log('skeleton.' + node.type, node.result);\n\n  return node;\n};\n\nconst handleGeometryNode = (node, ctx) => {\n  log('geometry.' + node.type, node);\n\n  const parameters = {};\n  Object.entries(node.parameters).forEach(([key, value]) => {\n    parameters[key] = isNode(value) ? handleGeometryNode(value, ctx) : value;\n  });\n\n  node.parameters = parameters;\n\n  node.result = { ...node.result, ...executeGeometryNode(node, ctx) };\n\n  log('geometry.' + node.type, node.result);\n\n  return node;\n};\n\nexport default function plant(rootNode: NodeResult, s: PlantariumSettings) {\n  const ctx = createContext(s);\n  console.log(rootNode, ctx);\n\n  const skelly = handleSkeletonNode(rootNode, ctx);\n\n  log('final skeleton', skelly);\n\n  const final = handleGeometryNode(skelly, ctx);\n\n  log('geo', final);\n\n  const { result } = final;\n\n  result.geometry = calculateNormals(result.geometry);\n\n  return result;\n}\n"],"names":["nodes","Nodes","forEach","n","type","lastCtx","lastSettings","log","logger","isNode","value","rootNode","s","ctx","settings","JSON","stringify","handleParameter","param","alpha","getSetting","key","defaultValue","console","seed","Math","random","refresh","createContext","skelly","handleSkeletonNode","node","parameters","Object","entries","result","computeSkeleton","executeSkeletonNode","final","handleGeometryNode","computeGeometry","executeGeometryNode","geometry","calculateNormals"],"mappings":"0WAIA,IAAMA,EAAuC,GAE7CC,EAAMC,QAAQ,SAACC,GACbH,EAAMG,EAAEC,MAAQD,IAGlB,ICNMH,EAAuC,GAE7CC,EAAMC,QAAQ,SAACC,GACbH,EAAMG,EAAEC,MAAQD,IAGlB,ICHIE,EADAC,EAAe,GCMbC,EAAMC,SAAO,aAEbC,EAAS,SAACC,GACd,MAAwB,iBAAVA,GAAsB,SAAUA,yGAoChD,SAA8BC,EAAsBC,GAClD,IAAMC,WDzBQC,GACd,IAAMF,EAAIG,KAAKC,UAAUF,GAOzB,OALIF,IAAMN,IACRA,EAAeM,EACfP,EAvBkB,SAACO,GACrB,MAAO,CACLK,yBAAgBC,EAAwBC,GACtC,OAAOA,GAETC,oBAAWC,EAAaC,SAEtB,OADAC,QAAQhB,IAAI,UAAWc,EAAKT,EAAES,aACvBT,EAAES,MAAQC,GAEnBE,WACE,OAAOC,KAAKC,UAEdC,mBACE,OAAOF,KAAKC,WAUJE,CAAcd,IAGnBT,ECiBKuB,CAAchB,GAC1BW,QAAQhB,IAAII,EAAUE,GAEtB,IAAMgB,EArCmB,SAArBC,EAAsBC,EAAMlB,GAChCN,EAAI,YAAcwB,EAAK3B,KAAM2B,GAE7B,IAAMC,EAAa,GAUnB,OATAC,OAAOC,QAAQH,EAAKC,YAAY9B,QAAQ,gBAAOQ,OAC7CsB,QAAkBvB,EAAOC,GAASoB,EAAmBpB,EAAOG,GAAOH,IAErEqB,EAAKC,WAAaA,EAElBD,EAAKI,gBHjBSJ,EAAMlB,GACpB,OAAIkB,EAAK3B,QAAQJ,EACRA,EAAM+B,EAAK3B,MAAMgC,gBAAgBL,EAAMlB,GAGzCkB,EAAKI,OGYEE,CAAoBN,EAAMlB,GAExCN,EAAI,YAAcwB,EAAK3B,KAAM2B,EAAKI,QAE3BJ,EAwBQD,CAAmBnB,EAAUE,GAE5CN,EAAI,iBAAkBsB,GAEtB,IAAMS,EAzBmB,SAArBC,EAAsBR,EAAMlB,GAChCN,EAAI,YAAcwB,EAAK3B,KAAM2B,GAE7B,IAAMC,EAAa,GAWnB,OAVAC,OAAOC,QAAQH,EAAKC,YAAY9B,QAAQ,gBAAOQ,OAC7CsB,QAAkBvB,EAAOC,GAAS6B,EAAmB7B,EAAOG,GAAOH,IAGrEqB,EAAKC,WAAaA,EAElBD,EAAKI,YAAcJ,EAAKI,gBFlCVJ,EAAMlB,GACpB,OAAIkB,EAAK3B,QAAQJ,EACRA,EAAM+B,EAAK3B,MAAMoC,gBAAgBT,EAAMlB,GAGzCkB,EAAKI,OE6BuBM,CAAoBV,EAAMlB,IAE7DN,EAAI,YAAcwB,EAAK3B,KAAM2B,EAAKI,QAE3BJ,EAWOQ,CAAmBV,EAAQhB,GAEzCN,EAAI,MAAO+B,OAEHH,EAAWG,EAAXH,OAIR,OAFAA,EAAOO,SAAWC,mBAAiBR,EAAOO,UAEnCP"}