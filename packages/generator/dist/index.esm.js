import{logger as r}from"@plantarium/helpers";import{calculateNormals as t}from"@plantarium/geometry";export{ground}from"@plantarium/geometry";import e from"@plantarium/nodes";function n(){return(n=Object.assign||function(r){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n])}return r}).apply(this,arguments)}var o={};e.forEach(function(r){o[r.type]=r});var a={};e.forEach(function(r){a[r.type]=r});var u,i="",p=r("gen.plant"),c=function(r){return"object"==typeof r&&"type"in r};function f(r,e){var f=function(r){var t=JSON.stringify(r);return t!==i&&(i=t,u=function(r){return{handleParameter:function(r,t){return t},getSetting:function(t,e){var n;return console.log("CTX GET",t,r[t]),null!=(n=r[t])?n:e},get seed(){return Math.random()},refresh:function(){return Math.random()}}}(r)),u}(e);console.log(r,f);var l=function r(t,e){p("skeleton."+t.type,t);var n={};return Object.entries(t.parameters).forEach(function(t){var o=t[1];n[t[0]]=c(o)?r(o,e):o}),t.parameters=n,t.result=function(r,t){return r.type in o?o[r.type].computeSkeleton(r,t):r.result}(t,e),p("skeleton."+t.type,t.result),t}(r,f);p("final skeleton",l);var s=function r(t,e){p("geometry."+t.type,t);var o={};return Object.entries(t.parameters).forEach(function(t){var n=t[1];o[t[0]]=c(n)?r(n,e):n}),t.parameters=o,t.result=n({},t.result,function(r,t){return r.type in a?a[r.type].computeGeometry(r,t):r.result}(t,e)),p("geometry."+t.type,t.result),t}(l,f);p("geo",s);var m=s.result;return m.geometry=t(m.geometry),m}export{f as plant};
//# sourceMappingURL=index.esm.js.map
